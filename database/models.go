// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type Visibility string

const (
	VisibilityPrivate Visibility = "private"
	VisibilityPublic  Visibility = "public"
)

func (e *Visibility) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Visibility(s)
	case string:
		*e = Visibility(s)
	default:
		return fmt.Errorf("unsupported scan type for Visibility: %T", src)
	}
	return nil
}

type NullVisibility struct {
	Visibility Visibility `json:"visibility"`
	Valid      bool       `json:"valid"` // Valid is true if Visibility is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVisibility) Scan(value interface{}) error {
	if value == nil {
		ns.Visibility, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Visibility.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVisibility) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Visibility), nil
}

type Project struct {
	ID            int32          `json:"id"`
	UserID        sql.NullInt32  `json:"user_id"`
	Name          string         `json:"name"`
	ThumbnailUrl  sql.NullString `json:"thumbnail_url"`
	Description   sql.NullString `json:"description"`
	Content       sql.NullString `json:"content"`
	Visibility    Visibility     `json:"visibility"`
	SourceCodeUrl sql.NullString `json:"source_code_url"`
	DeploymentUrl sql.NullString `json:"deployment_url"`
	CreatedAt     sql.NullTime   `json:"created_at"`
}

type ProjectComment struct {
	ID              int32         `json:"id"`
	ProjectID       sql.NullInt32 `json:"project_id"`
	UserID          sql.NullInt32 `json:"user_id"`
	ParentCommentID sql.NullInt32 `json:"parent_comment_id"`
	Content         string        `json:"content"`
	CreatedAt       sql.NullTime  `json:"created_at"`
}

type User struct {
	ID                 int32          `json:"id"`
	FullName           sql.NullString `json:"full_name"`
	Username           string         `json:"username"`
	Password           string         `json:"password"`
	Bio                sql.NullString `json:"bio"`
	ProfilePictureUrl  sql.NullString `json:"profile_picture_url"`
	PersonalWebsiteUrl sql.NullString `json:"personal_website_url"`
	GithubUrl          sql.NullString `json:"github_url"`
	Location           sql.NullString `json:"location"`
	CreatedAt          sql.NullTime   `json:"created_at"`
}
